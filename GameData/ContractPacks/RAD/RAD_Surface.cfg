// Contract for RAD Surface experiments. 8-12 experiments on the surface or splashed in 1 biome.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_Surface
    group = RAD
    genericTitle = #CCRAD_Surface_genericTitle // Gather data from the surface
    genericDescription = #CCRAD_Surface_genericDescription // Gather data from the surface
	
	title = #CCRAD_Surface_title // Gather data from the surface at @biome1
	description = #CCRAD_Surface_description // We've obtained some good imagery of the surface of @targetBody. Normally this would be none of your concern, but there's something odd with these pictures. Our top labcoats are confused, even the janitor was clueless. There's this smear you see. Or is it a smudge? A speck? Or a blur..? Well nevermind, whatever it is, it's located at @biome1. We want you to go there and get some properly close up and personal info on the area. Get to the surface over there and report back what you find. 
	
    synopsis = #CCRAD_Surface_synopsis // <color=yellow>Send a craft onto the surface of @targetBody and perform the required experiments.</color>
    completedMessage = #CCRAD_Surface_completedMessage // That's odd, the data you've gathered shows nothing out of the ordinary. How perfectly unsatisfying. We're still going to fire that janitor.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks075
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from orbited bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = OrbitedBodies().Where(cb => !cb.IsSun() && cb.HasSurface())
    }

	//Select biome 1
	DATA
    {
		type = Biome
        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome1 = @targetBody.Biomes().Where(b => b.RemainingScience() > 15.0).SelectUnique()
    }
	
	// Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiome([@biome1])
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.CollectedScience() == 0.0)

		scienceSubjects = @scienceSubjectsTemp4.Random(8,12)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		subject = @/scienceSubjects
		//biome = @scienceSubject.Biome()
		//situation = @scienceSubject.Situation()
		//experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(8000.0, 12000.0) + Random(3000.0, 5000.0) * @subject.Count()
		disableOnStateChange = true
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
