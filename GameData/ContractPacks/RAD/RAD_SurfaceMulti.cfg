// Contract for RAD Surface analysis. 5-7 experiments across 2 biomes, landed or splashed only.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_SurfaceMulti
    group = RAD
    genericTitle = #CCRAD_SurfaceMulti_genericTitle // Analyze the surface
    genericDescription = #CCRAD_SurfaceMulti_genericDescription // Analyze the surface at different locations
	
	title = #CCRAD_SurfaceMulti_title // Analyze the surface at @biome1 and @biome2
	description = #CCRAD_SurfaceMulti_description // One of our resident scientists has had an epiphany. They're saying our experimental data would be improved if we performed the same experiments in multiple locations. Something about causality, correlation, significancy and all that. Don't worry we're not sure either. The point is, our scientist's enthusiasm has brought in more budget from our sponsors. Under condition that we actually do those experiments of course. We can't be bothered with such menial work, naturally. Go and analyze @biome1 and @biome2 from the surface for us.
	
    synopsis = #CCRAD_SurfaceMulti_synopsis // <color=yellow>Send a craft onto the surface of @targetBody at @biome1 and @biome2 and perform the required experiments.</color>
    completedMessage = #CCRAD_SurfaceMulti_completedMessage // Well, well. It looks like our dear scientist wasn't all up in the cuckoo's nest after all. Don't go telling them this though, next they'll want a promotion, a raise, or some other unwanted complication.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks05
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from reached bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = ReachedBodies().Where(cb => !cb.IsSun())
    }

	//Select biomes
	DATA
    {
		type = List<Biome>
        hidden = true
		
		biomes = @targetBody.Biomes().Where(b => b.RemainingScience() > 15.0).Random(2)
    }
	
	//Biome name node
	DATA
    {
		type = Biome
        hidden = true
		
		biome1 = @biomes.First()
		biome2 = @biomes.Last()
    }
	
    // Exclusion list of experiments, select 5-7 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Where(e => !e.ID().StartsWith("ROCScience_"))
		experiments2 = @experiments1.Random(5,7)
    }
	
	// Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment(@biomes, @experiments2)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == SrfLanded || s.Situation() == SrfSplashed)
		//scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects = @scienceSubjectsTemp3.Random(8,10)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(6000.0, 10000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceSubjects
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
