// Contract for RAD Orbital study. 6-8 experiments across all available biomes, low and high space only.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_Orbital
    group = RAD
    genericTitle = #CCRAD_Orbital_genericTitle // Perform an orbital study
    genericDescription = #CCRAD_Orbital_genericDescription // Perform an orbital study
	
	title = #CCRAD_Orbital_title // Perform an orbital study from orbit of @targetBody.
	description = #CCRAD_Orbital_description // We know that @targetBody is a place of mystery, of intrigue. But mostly, it's a place we, and by we we mean you, have not done enough science yet. Get out to space around it and don't come back until you've done all the requested experiments!
	
    synopsis = #CCRAD_Orbital_synopsis // <color=yellow>Send a craft into space around @targetBody and perform the requested experiments. Be mindful of the altitudes required.</color>
    completedMessage = #CCRAD_Orbital_completedMessage // That'll do, for now anyway. You may leave the results on the desk.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks05
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from reached bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = ReachedBodies().Where(cb => !cb.IsSun())
    }

    // Exclusion list of experiments, select 4 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(4)
    }
	
	// Mission activates only for science that has not yet been done and triggers only when at least 4 and up to 6 different experiment/location combinations are available.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

		scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], @experiments1)
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => !s.Biome().IsKSC())
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.Situation() == InSpaceLow || s.Situation() == InSpaceHigh)
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.CollectedScience() == 0.0)

        scienceSubjects = @scienceSubjectsTemp4.Random(6,8)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(4000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceSubjects
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
