// Contract for RAD Leftovers. 2-5 experiments that have already been done but still have >1 science value left to be recovered.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_Leftovers
    group = RAD
    genericTitle = #CCRAD_Leftovers_genericTitle // Gather remaining data
    genericDescription = #CCRAD_Leftovers_genericDescription // Gather remaining data
	
	title = #CCRAD_Leftovers_title // Gather leftover data for experiments on @targetBody
	description = #CCRAD_Leftovers_description // It came to our attention that there's some experiments that you've done, for which the data we received is yet incomplete. This of course cannot stand, how are we to explain this to our superiors?! Go and remedy the situation with all due haste. Do be diligent, I'm sure there's still a vacancy in the testing department for you otherwise. I'm sure you understand.
	
    synopsis = #CCRAD_Leftovers_synopsis // <color=yellow>Gather the remaining data for experiments on @targetBody. Pay attention to the necessary recovery method!</color>
    completedMessage = #CCRAD_Leftovers_completedMessage // Finally some satisfactory data. You may continue... for now.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks1
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from orbited bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = OrbitedBodies().Where(cb => !cb.IsSun())
    }
	
	//Select situation from possible subjects
	DATA
    {
        type = ExperimentSituations
        hidden = true

        situation = @subjectsituation.Situation()
    }
	
	//Select a random applicable subject to allow situation selection
	DATA
    {
        type = ScienceSubject
        hidden = true

        subjectsituation = @scienceSubjectsTemp3.Random()
    }
	
	// Mission activates only for science that has already been done, but still has >1 science value left. Select up to 6.
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBody([@targetBody])
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() > 0.0)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.NextScienceReportValue() > 1.0)
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Situation() == @situation)
		scienceSubjects = @scienceSubjectsTemp4.Random(3,6)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = Ideal
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		//subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(4000.0, 8000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceSubjects
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
