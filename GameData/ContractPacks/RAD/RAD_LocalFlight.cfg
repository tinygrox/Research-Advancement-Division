// Contract for RAD Local Observation Flight. 8-12 experiments flying high or low in 1 biome.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_LocalFlight
    group = RAD
    genericTitle = #CCRAD_LocalFlight_genericTitle // Execute a local observation flight
    genericDescription = #CCRAD_LocalFlight_genericDescription // Execute a local observation flight
	
	title = #CCRAD_LocalFlight_title // Execute a local observation flight at @biome1
	description = #CCRAD_LocalFlight_description // I'm sure you're aware of the existence of @biome1. We certainly are. What you may not be aware of, is that we think @biome1 is a strange place. More specifically, according to our highly sophisticated **REDACTED** this area has a high potential for **REDACTED**. The only way to be sure however, is for you to send some hardware over there and confirm. 
	
    synopsis = #CCRAD_LocalFlight_synopsis // <color=yellow>Send a craft to the sky above @biome1 and perform the required experiments.</color>
    completedMessage = #CCRAD_LocalFlight_completedMessage // What wonderful news! These discoveries will surely forever change the **REDACTED** of our great **REDACTED**!

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks075
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from orbited bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = OrbitedBodies().Where(cb => !cb.IsSun() && cb.HasAtmosphere())
    }

	//Select biome 1
	DATA
    {
		type = Biome
        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true
		
		biome1 = @targetBody.Biomes().Where(b => b.RemainingScience() > 15.0).SelectUnique()
    }
	
	// Exclusion list of experiments, select 40 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(40)
    }
	
	// Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment([@biome1], @experiments1)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == FlyingHigh || s.Situation() == FlyingLow)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Experiment().ID().StartsWith("ROCScience_"))
		scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.CollectedScience() == 0.0)
		
		scienceSubjects = @scienceSubjectsTemp4.Random(8,12)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		subject = @/scienceSubjects
		//biome = @scienceSubject.Biome()
		//situation = @scienceSubject.Situation()
		//experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(8000.0, 12000.0) + Random(3000.0, 5000.0) * @subject.Count()
		disableOnStateChange = true
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
