// Contract for RAD Atmospheric Investigation. 8-12 experiments across up to 4 biomes, flying low and high only.
//   Author: Morphisor

CONTRACT_TYPE
{
    name = RAD_Atmo
    group = RAD
    genericTitle = #CCRAD_Atmo_genericTitle // Perform an atmospheric investigation
    genericDescription = #CCRAD_Atmo_genericDescription // Perform an atmospheric investigation
	
	title = #CCRAD_Atmo_title // Investigate the atmosphere in several areas on @targetBody
	description = #CCRAD_Atmo_description // With all this focus on space stuff all around this place you'd almost forget that there's interesting things that are not in space, too! One of the eggheads told us (implored, even) that studying atmospheric phenomena is at least as valuable for our... science program. Or was he talking about the lab's airconditioning.. That might explain why he turned just a little greener than usual. Just be sure, get out there and get some atmospheric data from the skies of @targetBody for us, will you?
	
    synopsis = #CCRAD_Atmo_synopsis // <color=yellow>Investigate the atmosphere on @targetBody, perform the required experiments. Take note which areas are requested!</color>
    completedMessage = #CCRAD_Atmo_completedMessage // Yeah sorry, it was definitely the airconditioning. We'll file your report somewhere safe, who knows someone may actually look at it within a few years. Or a hundred.

    // 1 at a time
    maxSimultaneous = 1

    // Always offered by RAD
    agent = Research Advancement Division

    targetBody = @validBodies.Random()

    // Contract rewards
	advanceFunds = Random(@RAD:Kerbucks025,@RAD:Kerbucks05)
    rewardFunds = @RAD:Kerbucks075
    rewardReputation = Random(2.0, 4.0)

	// Randomly select a possible target body from orbited bodies
	DATA
    {
        name = bodieslist
		title = bodieslist
		type = List<CelestialBody>
		hidden = true
	
        validBodies = OrbitedBodies().Where(cb => !cb.IsSun() && cb.HasAtmosphere())
    }

	//Select biomes
	DATA
    {
		type = List<Biome>
        hidden = true
		
		biomes = @targetBody.Biomes().Where(b => b.RemainingScience() > 15.0).Random(3,4)
    }
	
    // Exclusion list of experiments, select 8-12 types
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, asteroidSample, surfaceSample ])
		experiments1 = @experiments.Random(8,12)
    }
	
	// Mission activates only for science that has not yet been done
    DATA
    {
		type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiomeExperiment(@biomes, @experiments1)
		scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == FlyingHigh || s.Situation() == FlyingLow)
		scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.CollectedScience() == 0.0)
		scienceSubjects = @scienceSubjectsTemp3.Random(8,12)
    }
	
	// Science recovery: transmit, recover, or ideal.
    DATA
    {
		type = ScienceRecoveryMethod
        hidden = true

        recoveryMethod = RecoverOrTransmit
    }

	PARAMETER
	{
		name = CollectScience
		type = CollectScience

		biome = @scienceSubject.Biome()
		situation = @scienceSubject.Situation()
		experiment = @scienceSubject.Experiment()
		recoveryMethod = @/recoveryMethod

		rewardFunds = Random(6000.0, 9000.0)
		disableOnStateChange = true
		
		ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceSubjects
        }
	}
	
	// Contract only becomes available after homeworld has been orbited.
    REQUIREMENT
    {
        name = OrbitReq
		type = Orbit
        targetBody = HomeWorld()
    }
}
